<div align="center">
<h1>Hoisting</h1>
</div>
Hoisting is a concept which enables us to extract values of variables and functions even before initialising/assigning value without getting error and this is happening due to the 1st phase (memory creation phase) of the Execution Context.

## Javascript Execution Context

```js
let a = 10;
function multiply(a) {
  return a * 20;
}
let b = multiply(20);
console.log(b);
```

JavaScript executes the following snippet in 2 phases line by line.
<br/>There are 2 phases :

<ol>
<li>Creation phase (Memory Creation Phase)</li>
<li>Execution phase (Code Execution Phase)</li>
</ol>

### Creation Phase

<ol>
<li>It creates a global or window object</li>
<li>It setups a memory heap for storing functions and variables references. It takes all variables and functions to store inside the window object.

</li>
<li>It Initializes variables and functions. For variables it initializes with undefined and for functions declaration it stores the complete function body and stores inside the window object.</li>
</ol>

### Execution Phase

JS engine executes the code line by line. It assigns values to variables and executes the function calls.

P.S. : For every function it creates a new execution context

It also uses call stack to keep track of the function calls

## What is Hoisting?

During the creation phase JS engine tends to move the declaration of variables and function to the top of the code which is know as hoisting.

```js
console.log(count); // undefined
var count = 4;
```

It gives undefined because of hoisting.

During creation phase it creates memory space for count variable and assigns a value undefined. Now during execution phase it sees the variable count and prints undefined.

<h4>Another Example with function</h4>

```js
getName(); // Namaste JavaScript
console.log(x); // Uncaught Reference: x is not defined.
console.log(getName); // f getName(){ console.log("Namaste JavaScript); }
function getName() {
  console.log("Namaste JavaScript");
}
```

<h4>Example with named function</h4>

```js
getName(); // Uncaught TypeError: getName is not a function
console.log(getName);
var getName = function () {
  console.log("Namaste JavaScript");
};
// The code won't execute as the first line itself throws an TypeError.
```

This code snippet did not work because the above function is a named function with var keyword, unlike the regular function which gets hoisted this named function treats function as a variabe.
So here in this case initially the var is undefined so it's not a function.

### Are let and const also hoisted?

```js
console.log(count);
let count = 6; // ReferenceError : cannot access 'count' before initialization
```

Yes ! they are hoisted but in temporal dead zone.

## Undesrtand Hoisting of let and const

```js
console.log(a); // ReferenceError: Cannot access 'a' before initialization
console.log(b); // prints undefined as expected
let a = 10;
console.log(a); // 10
var b = 15;
console.log(window.a); // undefined
console.log(window.b); // 15
```

It looks like let isn't hoisted but it is!
<br/><br/>
Both a and b are actually initialized as undefined in hoisting stage. But var b is inside the storage space of GLOBAL, and a is in a separate memory object called script, where it can be accessed only after assigning some value to it first ie. one can access 'a' only if it is assigned. Thus, it throws error.

### What is Temporal dead zone?

It is the time between declaration and initialization of let and const variables.
Or in other words,it is the time since when the let variable was hoisted until it is initialized some value.

<h4>Note: Reference Error are thrown when variables are in temporal dead zone.</h4>

PS: If it was <b>syntax error</b> it doesn't even let us run single line of code.

```js
  let a = 10;
  let a = 100;  //this code is rejected upfront as SyntaxError. (duplicate declaration)
  ------------------
  let a = 10;
  var a = 100; // this code also rejected upfront as SyntaxError. (can't use same name in same scope)
```

## Different Types of Error

<ol>
<li><h4>Uncaught ReferenceError: x is not defined at ...</h4>
This Error signifies that x has never been in the scope of the program. This literally means that x was never defined/declared and is being tried to be accesed.</li>
<li><h4>
Uncaught ReferenceError: cannot access 'a' before initialization</h4>This Error signifies that 'a' cannot be accessed because it is declared as 'let' and since it is not assigned a value, it is its Temporal Dead Zone. Thus, this error occurs.</li>
<li><h4>Uncaught SyntaxError: Identifier 'a' has already been declared</h4>This Error signifies that we are redeclaring a variable that is 'let' declared. No execution will take place.</li>
<li><h4>Uncaught SyntaxError: Missing initializer in const declaration</h4>This Error signifies that we haven't initialized or assigned value to a const declaration.</li>
<li><h4>Uncaught TypeError: Assignment to constant variable</h4>This Error signifies that we are reassigning to a const variable.</li>

</ol>

```js

let a;
a = 10;
console.log(a) // 10. Note declaration and assigning of a is in different lines.
------------------
const b;
b = 10;
console.log(b); // SyntaxError: Missing initializer in const declaration. (This type of declaration won't work with const. const b = 10 only will work)
------------------
const b = 100;
b = 1000; //this gives us TypeError: Assignment to constant variable.
```
